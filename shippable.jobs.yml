jobs:
  - name: build_microbase
    type: runCLI
    steps:
      - IN: microbase_repo
      - IN: push_dry_tag
      - IN: ship_dh_cli
      - TASK:
        - script: ./IN/microbase_repo/gitRepo/build.sh
      - OUT: microbase_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build_nexec
    type: runCLI
    steps:
      - IN: nexec_repo
      - IN: microbase_img
      - IN: shipbits_ecr_cli
      - TASK:
        - script: ./IN/nexec_repo/gitRepo/build.sh
      - OUT: nexec_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  ##########################
  # begin Shippable Server jobs
  ##########################
  - name: build_micro
    type: runCLI
    steps:
      - IN: micro_repo
      - IN: microbase_img
      - IN: shipbits_ecr_cli
      - TASK:
        - script: ./IN/micro_repo/gitRepo/build.sh
      - OUT: micro_img
      - OUT: genexec_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build_api
    type: runCLI
    steps:
      - IN: api_repo
      - IN: microbase_img
      - IN: shipbits_ecr_cli
      - TASK:
        - script: ./IN/api_repo/gitRepo/build.sh
      - OUT: api_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build_www
    type: runCLI
    steps:
      - IN: www_repo
      - IN: microbase_img
      - IN: shipbits_ecr_cli
      - TASK:
        - script: ./IN/www_repo/gitRepo/build.sh
      - OUT: www_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  ###########################################
  # release alpha server from default manifest
  ###########################################

  - name: rel-alpha
    type: release
    on_start:
      - NOTIFY: slack_alpha
    steps:
      - IN: ship_ver
      - IN: api_img
      - IN: www_img
      - IN: nexec_img
      - IN: micro_img
      - IN: genexec_img
      - TASK: managed
        bump: alpha
    on_success:
      - NOTIFY: slack_alpha
    on_failure:
      - NOTIFY: slack_alpha

  ###########################################
  # push alpha release to special repo
  ###########################################

  - name: push_alpha
    type: runCLI
    steps:
      - IN: config_repo
        switch: off
      - IN: base_repo
        switch: off
      - IN: shipbits_ecr_cli
      - IN: ship_dh_cli
      - IN: rel-alpha
      - IN: api_img
        switch: off
      - IN: www_img
        switch: off
      - IN: nexec_img
        switch: off
      - IN: micro_img
        switch: off
      - IN: genexec_img
        switch: off
      - TASK:
        - script: ./IN/config_repo/gitRepo/pushAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # deploy alpha release to alpha environment
  ###########################################

  - name: deploy_alpha
    type: runSh
    on_start:
      - NOTIFY: slack_alpha
    steps:
      - IN: config_repo
        switch: off
      - IN: push_alpha
      - IN: aws_alpha_pem
      - IN: aws_alpha_swarm
      - TASK:
        - script: ./IN/config_repo/gitRepo/deployAlpha.sh
    on_success:
      - script: echo 'succeeded'
      - NOTIFY: slack_alpha
    on_failure:
      - script: echo 'failed'
      - NOTIFY: slack_alpha

  ###########################################
  # release rc server from default manifest
  ###########################################

  - name: rel-rc
    type: release
    on_start:
      - NOTIFY: slack_rc
    steps:
      - IN: rel-alpha
        switch: off
      - TASK: managed
        bump: rc
    on_success:
      - NOTIFY: slack_rc
    on_failure:
      - NOTIFY: slack_rc
  ###########################################
  # push rc release to special repo
  ###########################################

  - name: push_rc
    type: runCLI
    steps:
      - IN: config_repo
        switch: off
      - IN: base_repo
        switch: off
      - IN: shipbits_ecr_cli
      - IN: ship_dh_cli
      - IN: push_alpha
        switch: off
      - IN: rel-rc
      - TASK:
        - script: ./IN/config_repo/gitRepo/pushRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # deploy rc release to rc environment
  ###########################################
  - name: deploy_rc
    type: runSh
    on_start:
      - NOTIFY: slack_rc
    steps:
      - IN: config_repo
        switch: off
      - IN: push_rc
        switch: off
      - IN: build_rcami
        switch: off
      - IN: aws_rc_pem
      - IN: aws_rc_swarm
      - TASK:
        - script: ./IN/config_repo/gitRepo/deployRc.sh
    on_success:
      - script: echo 'succeeded'
      - NOTIFY: slack_rc
    on_failure:
      - script: echo 'failed'
      - NOTIFY: slack_rc

  ###############################
  # begin Shippable-Server(Qhode) pipeline
  ###############################
  # deploy to qhode-alpha-environment
  - name: deploy_qhode_alpha
    type: runSh
    steps:
      - IN: config_repo
        switch: off
      - IN: push_alpha
      - IN: aws_alpha_pem
      - IN: qhode_alpha_swarm
      - TASK:
        - script: ./IN/config_repo/gitRepo/deployQhodeAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  # deploy to qhode-rc-environment
  - name: deploy_qhode_rc
    type: runSh
    steps:
      - IN: config_repo
        switch: off
      - IN: push_rc
        switch: off
      - IN: build_rcami
        switch: off
      - IN: aws_rc_pem
      - IN: qhode_rc_swarm
      - TASK:
        - script: ./IN/config_repo/gitRepo/deployQhodeRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # end Shippable-Server(Qhode) pipeline
  ###############################

  ###############################
  # begin Shippable-Server(Prod) pipeline
  ###############################

  ###########################################
  # release production from default manifest
  ###########################################

  - name: rel-final
    type: release
    steps:
      - IN: rel-rc
        switch: off
      - TASK: managed
        bump: final

  ###########################################
  # push rc release to special repo
  ###########################################

  - name: push_final
    type: runCLI
    steps:
      - IN: config_repo
        switch: off
      - IN: base_repo
        switch: off
      - IN: shipbits_ecr_cli
      - IN: ship_dh_cli
      - IN: push_rc
        switch: off
      - IN: rel-final
      - TASK:
        - script: ./IN/config_repo/gitRepo/pushFinal.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # end Shippable-Server(Prod) pipeline
  ###############################

  ###########################################
  # BEGIN run infra provisioning
  ###########################################

  - name: alpha_saas_infra_prov
    type: runSh
    steps:
      - IN: aws_alpha_pem
      - IN: aws_alpha_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh alpha saas
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh alpha saas

  - name: alpha_server_infra_prov
    type: runSh
    steps:
      - IN: aws_alpha_pem
      - IN: aws_alpha_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh alpha server
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh alpha server

  - name: rc_saas_infra_prov
    type: runSh
    steps:
      - IN: aws_rc_pem
      - IN: aws_rc_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh rc saas
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh rc saas

  - name: rc_server_infra_prov
    type: runSh
    steps:
      - IN: aws_rc_pem
      - IN: aws_rc_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh rc server
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh rc server

  - name: prod_saas_infra_prov
    type: runSh
    steps:
      - IN: aws_prod_pem
      - IN: aws_prod_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh prod saas
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh prod saas

  ###########################################
  # BEGIN run infra provisioning
  ###########################################

  ###########################################
  # BEGIN Build Acceptance Tests
  ###########################################

  - name: build_acceptance
    type: runSh
    steps:
      - IN: bat_repo
      - IN: bat_ship_alpha_parms
      - IN: deploy_alpha
      - TASK:
        - script: IN/bat_repo/gitRepo/test.sh bat_ship_alpha_parms
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # END Build Acceptance Tests
  ###########################################

  ###########################################
  # START Build AMI
  ###########################################

  - name: push_dry_tag
    type: runSh
    steps:
      - IN: ship_ver
        switch: off
      - IN: bldami_repo
        switch: off
      - IN: ship_dh
      - TASK:
        - script: IN/bldami_repo/gitRepo/tagImage/pushDryDockTag.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  - name: build_baseami
    type: runSh
    steps:
      - IN: push_dry_tag
      - IN: baseami_params
      - IN: aws_bits_access
      - IN: bldami_repo
        switch: off
      - TASK:
        - script: IN/bldami_repo/gitRepo/base/basePack.sh
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat IN/bldami_repo/gitRepo/base/output.txt

  - name: patch_baseami
    type: runSh
    steps:
      - IN: baseami_params
      - IN: aws_bits_access
      - IN: build_baseami
      - IN: bldami_repo
        switch: off
      - TASK:
        - script: IN/bldami_repo/gitRepo/basePatch/basePatchPack.sh
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat IN/bldami_repo/gitRepo/basePatch/output.txt

  - name: build_rcami
    type: runSh
    steps:
      - IN: baseami_params
      - IN: aws_bits_access
      - IN: bldami_repo
        switch: off
      - IN: patch_baseami
        switch: off
      - IN: push_rc
      - TASK:
        - script: IN/bldami_repo/gitRepo/exec/execPack.sh build_rcami push_rc
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat /build/IN/bldami_repo/gitRepo/exec/output.txt

  - name: build_finalami
    type: runSh
    steps:
      - IN: baseami_params
      - IN: aws_bits_access
      - IN: bldami_repo
        switch: off
      - IN: patch_baseami
        switch: off
      - IN: push_final
      - TASK:
        - script: IN/bldami_repo/gitRepo/exec/execPack.sh build_finalami push_final
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat /build/IN/bldami_repo/gitRepo/exec/output.txt


  ###########################################
  # END Build AMI
  ###########################################
