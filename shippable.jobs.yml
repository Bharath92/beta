jobs:
  - name: build-microbase
    type: runSh
    steps:
      - IN: microbase_repo
      - IN: push_dry_tag
      - IN: ship_dh
      - TASK:
        - script: ./IN/microbase_repo/gitRepo/build.sh
      - OUT: microbase_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-nexec
    type: runSh
    steps:
      - IN: nexec_repo
      - IN: microbase_img
      - IN: shipbits_ecr_cli
      - TASK:
        - script: ./IN/nexec_repo/gitRepo/build.sh
      - OUT: nexec_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build_nexec
    type: runCLI
    steps:
      - IN: nexec_repo
      - IN: microbase_img
      - IN: shipbits_ecr_cli
      - TASK:
        - script: ./IN/nexec_repo/gitRepo/build.sh
      - OUT: nexec_img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  ##########################
  # begin Shippable Server jobs
  ##########################
  - name: build-micro
    type: runSh
    steps:
      - IN: micro-repo
      - IN: microbase-img
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/micro-repo/gitRepo/build.sh
      - OUT: micro-img
      - OUT: genexec-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-api
    type: runSh
    steps:
      - IN: api-repo
      - IN: microbase-img
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/api-repo/gitRepo/build.sh
      - OUT: api-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-www
    type: runSh
    steps:
      - IN: www-repo
      - IN: microbase-img
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/www-repo/gitRepo/build.sh
      - OUT: www-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  ###########################################
  # package all server images into one default manifest
  ###########################################

  - name: man-ship
    type: manifest
    steps:
      - IN: api-img
      - IN: www-img
      - IN: nexec-img
      - IN: micro-img
      - IN: genexec-img

  ###########################################
  # release alpha server from default manifest
  ###########################################

  - name: rel-alpha
    type: release
    on_start:
      - NOTIFY: slack-alpha
    steps:
      - IN: ship-ver
      - IN: man-ship
      - TASK: managed
        bump: alpha
    on_success:
      - NOTIFY: slack-alpha
    on_failure:
      - NOTIFY: slack-alpha
  ###########################################
  # push alpha release to special repo
  ###########################################

  - name: push-alpha
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: base-repo
        switch: off
      - IN: shipbits-ecr
      - IN: shipimg-dockerhub
      - IN: rel-alpha
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/beta-config-repo/gitRepo/pushAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # deploy alpha release to alpha environment
  ###########################################

  - name: deploy-alpha
    type: runSh
    on_start:
      - NOTIFY: slack-alpha
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-alpha
        switch: off
      - IN: push-alpha
      - IN: aws-alpha-pem
      - IN: aws-alpha-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployAlpha.sh
    on_success:
      - script: echo 'succeeded'
      - NOTIFY: slack-alpha
    on_failure:
      - script: echo 'failed'
      - NOTIFY: slack-alpha

  ###########################################
  # release rc server from default manifest
  ###########################################

  - name: rel-rc
    type: release
    on_start:
      - NOTIFY: slack-rc
    steps:
      - IN: rel-alpha
        switch: off
      - TASK: managed
        bump: rc
    on_success:
      - NOTIFY: slack-rc
    on_failure:
      - NOTIFY: slack-rc
  ###########################################
  # push rc release to special repo
  ###########################################

  - name: push-rc
    type: runSh
    steps:
      - IN: push-alpha
        switch: off
      - IN: base-repo
        switch: off
      - IN: beta-config-repo
        switch: off
      - IN: shipbits-ecr
      - IN: shipimg-dockerhub
      - IN: rel-rc
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/beta-config-repo/gitRepo/pushRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # deploy rc release to rc environment
  ###########################################

  - name: deploy-rc
    type: runSh
    on_start:
      - NOTIFY: slack-rc
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-rc
        switch: off
      - IN: build-rcami
        switch: off
      - IN: aws-rc-pem
      - IN: aws-rc-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployRc.sh
    on_success:
      - script: echo 'succeeded'
      - NOTIFY: slack-rc
    on_failure:
      - script: echo 'failed'
      - NOTIFY: slack-rc

  ###############################
  # begin Shippable-Server(Qhode) pipeline
  ###############################
  # deploy to qhode-alpha-environment
  - name: deploy-qhode-alpha
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-alpha
        switch: off
      - IN: push-alpha
      - IN: aws-alpha-pem
      - IN: qhode-alpha-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployQhodeAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  # deploy to qhode-rc-environment
  - name: deploy-qhode-rc
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-rc
        switch: off
      - IN: build-rcami
        switch: off
      - IN: aws-rc-pem
      - IN: qhode-rc-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployQhodeRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # end Shippable-Server(Qhode) pipeline
  ###############################

  ###############################
  # begin Shippable-Server(Prod) pipeline
  ###############################

  ###########################################
  # release production from default manifest
  ###########################################

  - name: rel-final
    type: release
    steps:
      - IN: rel-rc
        switch: off
      - TASK: managed
        bump: final

  ###########################################
  # push rc release to special repo
  ###########################################

  - name: push-final
    type: runSh
    steps:
      - IN: push-rc
        switch: off
      - IN: beta-config-repo
        switch: off
      - IN: base-repo
        switch: off
      - IN: shipbits-ecr
      - IN: shipimg-dockerhub
      - IN: rel-final
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/beta-config-repo/gitRepo/pushFinal.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # end Shippable-Server(Prod) pipeline
  ###############################

  ###########################################
  # BEGIN run infra provisioning
  ###########################################

  - name: alpha_saas_infra_prov
    type: runSh
    steps:
      - IN: alpha_aws_pem
      - IN: alpha_aws_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh alpha saas
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh alpha saas

  - name: alpha_server_infra_prov
    type: runSh
    steps:
      - IN: alpha_aws_pem
      - IN: alpha_aws_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh alpha server
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh alpha server

  - name: rc_saas_infra_prov
    type: runSh
    steps:
      - IN: rc_aws_pem
      - IN: rc_aws_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh rc saas
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh rc saas

  - name: rc_server_infra_prov
    type: runSh
    steps:
      - IN: rc_aws_pem
      - IN: rc_aws_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh rc server
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh rc server


  - name: prod_saas_infra_prov
    type: runSh
    steps:
      - IN: prod_aws_pem
      - IN: prod_aws_access
      - IN: infra_repo
        switch: off
      - TASK:
        - script: IN/infra_repo/gitRepo/provision.sh prod saas
    on_success:
      - script: echo 'SUCCESS!'
    on_failure:
      - script: echo 'FAILURE!'
    always:
      - script: /build/IN/infra_repo/gitRepo/archiveProvisionState.sh prod saas

  ###########################################
  # BEGIN run infra provisioning
  ###########################################

  ###########################################
  # BEGIN Build Acceptance Tests
  ###########################################

  - name: build-accept-test
    type: runSh
    steps:
      - IN: bat-repo
      - IN: bat-ship-alpha-parms
      - IN: deploy-alpha
      - TASK:
        - script: sudo apt-get install -y jq
        - script: IN/bat-repo/gitRepo/test.sh bat-ship-alpha-parms
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # END Build Acceptance Tests
  ###########################################

  ###########################################
  # START Build AMI
  ###########################################

  - name: push_dry_tag
    type: runSh
    steps:
      - IN: ship-ver
        switch: off
      - IN: bldami_repo
        switch: off
      - IN: ship_dh
      - TASK:
        - script: IN/bldami_repo/gitRepo/tagImage/pushDryDockTag.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  - name: build_baseami
    type: runSh
    steps:
      - IN: push_dry_tag
      - IN: baseami_params
      - IN: aws_bits_access
      - IN: bldami_repo
        switch: off
      - TASK:
        - script: IN/bldami_repo/gitRepo/base/basePack.sh
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat IN/bldami_repo/gitRepo/base/output.txt

  - name: patch-baseami
    type: runSh
    steps:
      - IN: baseami_params
      - IN: aws_bits_access
      - IN: build_baseami
      - IN: bldami_repo
        switch: off
      - TASK:
        - script: IN/bldami_repo/gitRepo/basePatch/basePatchPack.sh
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat IN/bldami_repo/gitRepo/basePatch/output.txt

  - name: build-rcami
    type: runSh
    steps:
      - IN: baseami-params
      - IN: aws-bits-access
      - IN: bldami-repo
        switch: off
      - IN: patch-baseami
        switch: off
      - IN: push-rc
      - TASK:
        - script: sudo apt-get install -y jq
        - script: IN/bldami-repo/gitRepo/exec/execPack.sh baseami-params push-rc ami-90fd0286 unstable
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat /build/IN/bldami-repo/gitRepo/exec/output.txt

  - name: build-finalami
    type: runSh
    steps:
      - IN: baseami-params
      - IN: aws-bits-access
      - IN: bldami-repo
        switch: off
      - IN: patch-baseami
        switch: off
      - IN: push-final
      - TASK:
        - script: sudo apt-get install -y jq
        - script: IN/bldami-repo/gitRepo/exec/execPack.sh baseami-params push-final ami-90fd0286 unstable
    on_success:
      - script: echo "SUCCESS"
    on_failure:
      - script: cat /build/IN/bldami-repo/gitRepo/exec/output.txt

  ###########################################
  # END Build AMI
  ###########################################
