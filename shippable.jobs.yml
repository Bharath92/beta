jobs:
  - name: tmp-man-api
    type: manifest
    steps:
      - IN: tmp-api-img
      - IN: tmp-api-params

  - name: tmp-deploy-api
    type: deploy
    steps:
      - IN: tmp-man-api
      - IN: tmp-api-scaler
      - IN: tmp-db-prms
      - IN: tmp-api-docOpts
      - IN: tmp-aws-cluster
      - TASK: managed
        deployMethod: upgrade

  - name: build-mexec
    type: runSh
    steps:
      - IN: mexec-repo
      - IN: microbase-img
      - IN: docker-creds
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/mexec-repo/gitRepo/build.sh
      - OUT: mexec-def-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-microbase
    type: runSh
    steps:
      - IN: microbase-repo
      - IN: docker-creds
      - TASK:
        - script: sudo apt-get install -y jq
        - script: ./IN/microbase-repo/gitRepo/build.sh
      - OUT: microbase-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-runSh
    type: runSh
    steps:
      - IN: runSh-repo
      - IN: microbase-img
      - IN: docker-creds
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/runSh-repo/gitRepo/build.sh
      - OUT: runSh-def-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-nexec
    type: runSh
    steps:
      - IN: nexec-repo
      - IN: microbase-img
      - IN: docker-creds
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/nexec-repo/gitRepo/build.sh
      - OUT: nexec-def-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  ##########################
  # begin Shippable Server jobs
  ##########################
  - name: build-micro-server
    type: runSh
    flags:
      - shippable-server
    steps:
      - IN: micro-server-repo
      - IN: microbase-img
      - IN: docker-creds
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/micro-server-repo/gitRepo/build.sh
        - script: ./IN/micro-server-repo/gitRepo/buildOld.sh
      - OUT: micro-def-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-api-server
    type: runSh
    flags:
      - shippable-server
    steps:
      - IN: api-server-repo
      - IN: microbase-img
      - IN: docker-creds
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/api-server-repo/gitRepo/build.sh
      - OUT: api-def-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  - name: build-www-server
    type: runSh
    flags:
      - shippable-server
    steps:
      - IN: www-server-repo
      - IN: microbase-img
      - IN: docker-creds
      - IN: shipbits-ecr
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/www-server-repo/gitRepo/build.sh
      - OUT: www-def-img
    on_success:
      - script: echo 'on success !!!!!'
    on_failure:
      - script: echo 'Failed job .... :('

  ###########################################
  # package all server images into one default manifest
  ###########################################

  - name: man-def-server
    type: manifest
    steps:
      - IN: api-def-img
      - IN: www-def-img
      - IN: nexec-def-img
      - IN: mexec-def-img
      - IN: runSh-def-img
      - IN: micro-def-img

  ###########################################
  # release alpha server from default manifest
  ###########################################

  - name: rel-alpha-server
    type: release
    steps:
      - IN: alpha-server-ver
      - IN: man-def-server
      - TASK: managed
        bump: alpha

  ###########################################
  # push alpha release to special repo
  ###########################################

  - name: push-alpha
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: shipbits-ecr
      - IN: shipimg-dockerhub
      - IN: rel-alpha-server
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/beta-config-repo/gitRepo/pushAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # deploy alpha release to alpha environment
  ###########################################

  - name: deploy-alpha
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-alpha-server
        switch: off
      - IN: push-alpha
      - IN: aws-alpha-pem
      - IN: aws-alpha-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # release rc server from default manifest
  ###########################################

  - name: rel-rc-server
    type: release
    steps:
      - IN: rc-server-ver
      - IN: man-def-server
        switch: off
      - TASK: managed
        bump: rc

  ###########################################
  # push rc release to special repo
  ###########################################

  - name: push-rc
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: deploy-alpha
        switch: off
      - IN: shipbits-ecr
      - IN: shipimg-dockerhub
      - IN: rel-rc-server
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/beta-config-repo/gitRepo/pushRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # deploy rc release to rc environment
  ###########################################

  - name: deploy-rc
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-rc-server
        switch: off
      - IN: push-rc
      - IN: aws-rc-pem
      - IN: aws-rc-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # begin Shippable-Server(Qhode) pipeline
  ###############################
  # deploy to qhode-alpha-environment
  - name: deploy-qhode-alpha
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-alpha-server
        switch: off
      - IN: push-alpha
      - IN: aws-alpha-pem
      - IN: qhode-alpha-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployQhodeAlpha.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  # deploy to qhode-rc-environment
  - name: deploy-qhode-rc
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: rel-rc-server
        switch: off
      - IN: push-rc
      - IN: aws-rc-pem
      - IN: qhode-rc-swarm
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq' && sudo apt-get install -y jq
        - script: ./IN/beta-config-repo/gitRepo/deployQhodeRc.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # end Shippable-Server(Qhode) pipeline
  ###############################

  ###############################
  # begin Shippable-Server(Prod) pipeline
  ###############################

  ###########################################
  # release production from default manifest
  ###########################################

  - name: rel-final
    type: release
    steps:
      - IN: final-release-ver
      - IN: man-def-server
        switch: off
      - TASK: managed
        bump: patch

  ###########################################
  # push rc release to special repo
  ###########################################

  - name: push-final
    type: runSh
    steps:
      - IN: beta-config-repo
        switch: off
      - IN: deploy-rc
        switch: off
      - IN: shipbits-ecr
      - IN: shipimg-dockerhub
      - IN: rel-final
      - TASK:
        - script: echo 'updating packages' && sudo apt-get update
        - script: echo 'installing jq and unzip' && sudo apt-get install -y jq unzip
        - script: echo 'installing awscli'
        - script: curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
        - script: unzip awscli-bundle.zip
        - script: sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        - script: echo 'which aws?' && which aws || true
        - script: aws --version
        - script: docker --version
        - script: ./IN/beta-config-repo/gitRepo/pushFinal.sh
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###############################
  # end Shippable-Server(Prod) pipeline
  ###############################

  ###########################################
  # BEGIN run infra provisioning
  ###########################################
  - name: infra-prov
    type: runSh
    steps:
      - IN: aws-alpha-pem
      - IN: aws-alpha-access
      - IN: aws-rc-pem
      - IN: aws-rc-access
      - IN: aws-prod-pem
      - IN: aws-prod-access
      - IN: infra-repo
      - TASK:
        - script: sudo apt-get install -y jq
        - script: IN/infra-repo/gitRepo/restoreState.sh
        - script: IN/infra-repo/gitRepo/detectEnvChanges.sh
    on_success:
      - script: /build/IN/infra-repo/gitRepo/archiveState.sh
    on_failure:
      - script: /build/IN/infra-repo/gitRepo/archiveState.sh

  ###########################################
  # BEGIN run infra provisioning
  ###########################################

  ###########################################
  # BEGIN Build Acceptance Tests
  ###########################################

  - name: build-accept-test
    type: runSh
    steps:
      - IN: bat-repo
      - IN: bat-ship-alpha-parms
      - TASK:
        - script: sudo apt-get install -y jq
        - script: IN/bat-repo/gitRepo/test.sh bat-ship-alpha-parms
    on_success:
      - script: echo 'succeeded'
    on_failure:
      - script: echo 'failed'

  ###########################################
  # END Build Acceptance Tests
  ###########################################